BECIRSPAHIC LUCAS

remarques : Prolog utilise la regle de résolution pour faire ses preuves.

==============================================
EXERCICE 1
==============================================

1) On a C1 = r(a,b)
     C2 = not(p(X,Y)) V r(f(X), Y)
     C3 = not(r(X,Y)) V p(f(X), Y)
     not(G) = not(r(f(f(a)),b))

G = r(f(f(a)),b)

i1 : (sigma(not(G)), sigma(c2))
unification ; on pose sigma = [Y = b; X = f(a) ]
dans ce cas C2 = not(p(f(a),b)) V (r(f(f(a)),b))
i1 retourne C4 = not(p(f(a), b))

i2 : (sigma(C4), sigma(c3))
unification : on pose sigma = [X = a; Y = b]
i2 retourne C5 = not(r(a,b))

i3 : C5, C1
retourne rien
Donc la formule r(f(f(a),b)) est vraie.

F2 = p(f(a),b)

On rajoute not(F2) a nos clauses.
On a F1 = Res(not(F2), C3) avec sigma = [X = a; Y = b]
     F1 = -r(a,b)
     F2 = Res(F1, C1)
     F2 = void.

Trace de prolog :
| ?- r(f(f(a)),b).
      1    1  Call: r(f(f(a)),b) ? 
      2    2  Call: p(f(a),b) ? 
      3    3  Call: r(a,b) ? 
      3    3  Exit: r(a,b) ? 
      2    2  Exit: p(f(a),b) ? 
      1    1  Exit: r(f(f(a)),b) ?

Dans ces lignes, il dit que pour montrer r(f(f(a)),b), il faut montrer p(f(a),b) et pour ce faire il montrer r(a,b) or on a r(a,b) donc il fait remonter l'information.

{trace}
| ?- p(f(a),b).
      1    1  Call: p(f(a),b) ? 
      2    2  Call: r(a,b) ? 
      2    2  Exit: r(a,b) ? 
      1    1  Exit: p(f(a),b) ? 

(1 ms) yes
{trace}


Conclusion : A chaue fois prolog part de la formule de départ et cherche ce qu'il faut montrer pour l'avoir , puis apres il remonte en montrant que les conditions sont respectées.
     
==========================================
EXERICE 2
==========================================

1) On obtient les clauses :
C1 = r(a,b)
C2 = q(X,X)
C3 = not(r(X,Y)) V (not(Q(X,Z))) V q(X,Z)
not(G1) = not(q(X,b))

F1 = res(not(G1), c2) avec sigma = [X = b]
F2 = clash

2) Analyses des traces :
-----------------------------------
{trace}
| ?- q(X,b).
      1    1  Call: q(_23,b) ? 
      1    1  Exit: q(b,b) ? 

X = b ?

yes
{trace}
Si on repond oui à X = b, la preuve s'arrête car on a q(X,X) qui rend l'affirmation vrai. De plus on remarque que :
_23 correspond à un nom de variable pour prolog.
le call correspond a la formule G.
le exit nous indique q(b,b) rend la formule vraie.
donc il nous retourne que X = b.


{trace}
| ?- 
q(X,b).
      1    1  Call: q(_23,b) ? 
      1    1  Exit: q(b,b) ? 

X = b ? ;
      1    1  Redo: q(b,b) ? 
      2    2  Call: r(_23,_92) ? 
      2    2  Exit: r(a,b) ? 
      3    2  Call: q(b,b) ? 
      3    2  Exit: q(b,b) ? 
      1    1  Exit: q(a,b) ? 

X = a ? 

(1 ms) yes
{trace}

Si on refuse X = b, alors il essaye d'utiliser r(X,Y),q(Y,Z) pour la preuve.
d'ou le call r(X,Z) dont il déduit qu'il faut que r(a,b) soit vrai.
on a F1 = R(not(G), C3) sigma = (Z = b, X = _G2831)
     F2 = R(F1, C4) sigma = (_G2831 = a, Y = b)
     F3 = R(C2,C3) sigma (X = b)


Maintenant, on étudie la requete q(b,X)
| ?- q(b,X).
      1    1  Call: q(b,_23) ? 
      1    1  Exit: q(b,b) ? 

X = b ? ;
      1    1  Redo: q(b,b) ? 
      2    2  Call: r(b,_92) ? 
      2    2  Fail: r(b,_80) ? 
      1    1  Fail: q(b,_23) ? 

no

Il essaye d'abord avec X = b, car q(b,b) est vrai.
Si on refuse X = b, il essaye d'utiliser r(X,Y),q(Y,Z)
or r(b, Y) echoue car on a uniquement r(a,b) donc prolog retourne non.
{trace}



==============================================
EXERCICE 3
==============================================

1) LANGAGE HUMAIN
   C1 = (serieux(X) -> R(E)) = not(serieux(X)) V Revise(E)
   C2 = (C(X) -> Devoir(X))
   C3 = (serieux(X) -> reussit(E))
   C4 = (Devoir(X) -> serieux(X))
   C5 = C(Pascal)
   C6 = C(Zoe)

prolog:
---------------------------
reussit(X) :- serieux(X).
devoir(X) :- cons(X).
serieux(X) :- devoir(X).
cons(pascal).
cons(zoe).

2) Requête : reussit(X)
prolog nous renvoi les valeurs que peut prendre la variable X c'est à dire les étudiants qui réussissent.

3) Le resultat de la requête est : Pascal, Zoe
F1 = -serieux V reussit
F2 = -cons V devoir
F3 = -devoir V serieux
h1 = cons(pascal)
h2 = cons(Zoe)

F5 <- F4,F1 = -serieux
F6 <- F5,F3 = -devoir
F7 <- F6,F2 = -cons
h1, F7 = void
h2, F7 = void

4)

===========================
EXERCICE 4
===========================

1) J'ai choisit les rougon macquart , on construit une base donnée de la forme :
pere(rougon, pierre).
mere(adelaide, pierre).

2) On définit parent de la manière suivante :
parent(X,Y) :- pere(X,Y).
parent(X,Y) :- mere(X,Y).
c'est à dire si c'est le père ou la mère, il s'agit du parent.

3)
---------------------------
| ?- parent(aristide, X).

X = maxime ? ;

X = clothilde ? ;

X = victor ? ;

La requete nous renvoie les enfants d'aristide(Saccard).
--------------------------
La requete parent(A,B) nous renvoie toutes les paires de (pere/mere, enfants).

6) On définit ancetre de manière recursive par :
----------------------------
ancetre(X,Y) :- parent(X,Y).
Pour le cas de base , si X est un parent de Y, alors il est son ancetre.

ancetre(X,Y) :- parent(Z, Y), ancetre(X, Z).
il s'agit de la récursion, si Z est un parent de Y alors X est un ancetre de Z.

Pour optenir les ancetres d'une personne on fait une requete de la forme :
--------------------
| ?- ancetre(X,maxime).

X = aristide ? ;

X = pierre ? ;

X = felicie ? ;

X = rougon ? ;

X = adelaide ? ;
--------------------




===========================
EXERCICE 5
===========================

1) On construit les prédicats de base(et, ou, non) avec leurs tables de vérité par exemple :
non(0,1).
non(1,0).

2) requete : et(X,Y,1).
retourne les valeurs de X et Y qui rendent le AND vrai.

requete : et(0,0,R).
retourne le resultat de l'opération AND(0,0) c'est à dire 0.

requete : et(X,Y,R)
retournes toutes les combinaisons valide, c'est à dire la table de vérité du AND.

3) En prolog, les fonctions ne renvoient pas de résulats. Par consequent pour constuire le circuit, on dit que :
circuit(X,Y,1) :- et(X,Y,R0),non(R0,R1),  non(X, R2), xor(R1,R2,R3), non(R3,1).
On veut que la sortie du circuit soit 1, et on fait passer les variables R0, R1 ... qui correspondent aux resultats des portes logiques dans les portes suivantes selon le schema.

4) La requete est : circuit(X,Y,R) et retourne :
----------------------
R = 1
X = 1
Y = 1 ? ;

R = 1
X = 0
Y = 0 ? ;

R = 1
X = 0
Y = 1 ? ;

R = 0
X = 1
Y = 0 ? ;
----------------------
ce qui correspond bien à la table de vérité de l'implication.

5) requete : circuit(0,Y,R).
--------------------------
R = 1
Y = 0 ? ;

R = 1
Y = 1 ? ;
--------------------------
On veut savoir quels sont les choix possibles quand X est fixé à 0.
et on remarque bien que comme l'implication quand le premier terme est à 0, le résultat est toujours 1.

